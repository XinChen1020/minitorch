MAP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map, 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (155)  
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (155) 
----------------------------------------------------------------------------------------------------------------------------|loop #ID
    def _map(                                                                                                               | 
        out: Storage,                                                                                                       | 
        out_shape: Shape,                                                                                                   | 
        out_strides: Strides,                                                                                               | 
        in_storage: Storage,                                                                                                | 
        in_shape: Shape,                                                                                                    | 
        in_strides: Strides,                                                                                                | 
    ) -> None:                                                                                                              | 
                                                                                                                            | 
                                                                                                                            | 
        if (len(out_strides) == len(in_strides)                                                                             | 
            and (out_strides == in_strides).all()---------------------------------------------------------------------------| #0
            and (out_shape == in_shape).all()):-----------------------------------------------------------------------------| #1
                                                                                                                            | 
            for i in prange(len(out)):--------------------------------------------------------------------------------------| #2
                out[i] = fn(in_storage[i])                                                                                  | 
        else:                                                                                                               | 
                                                                                                                            | 
                                                                                                                            | 
            for i in prange(len(out)):--------------------------------------------------------------------------------------| #4
                in_index = np.empty(MAX_DIMS, dtype=np.int64)                                                               | 
                out_index = np.empty(MAX_DIMS, dtype=np.int64)                                                              | 
                                                                                                                            | 
                to_index(i, out_shape, out_index)                                                                           | 
                broadcast_index(out_index, out_shape, in_shape, in_index)                                                   | 
                                                                                                                            | 
                out[index_to_position(out_index, out_strides)] = fn(in_storage[index_to_position(in_index, in_strides)])    | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 5 parallel for-
loop(s) (originating from loops labelled: #0, #1, #2, #4, #3).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--4 is a parallel loop
   +--3 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--4 (parallel)
   +--3 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--4 (parallel)
   +--3 (serial)


 
Parallel region 0 (loop #4) had 0 loop(s) fused and 1 loop(s) serialized as part
 of the larger parallel loop (#4).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (175) is hoisted
 out of the parallel loop labelled #4 (it will be performed before the loop is 
executed and reused inside the loop):
   Allocation:: in_index = np.empty(MAX_DIMS, dtype=np.int64)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (176) is hoisted
 out of the parallel loop labelled #4 (it will be performed before the loop is 
executed and reused inside the loop):
   Allocation:: out_index = np.empty(MAX_DIMS, dtype=np.int64)
    - numpy.empty() is used for the allocation.
None
ZIP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip, 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (210)  
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (210) 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|loop #ID
    def _zip(                                                                                                                                                                | 
        out: Storage,                                                                                                                                                        | 
        out_shape: Shape,                                                                                                                                                    | 
        out_strides: Strides,                                                                                                                                                | 
        a_storage: Storage,                                                                                                                                                  | 
        a_shape: Shape,                                                                                                                                                      | 
        a_strides: Strides,                                                                                                                                                  | 
        b_storage: Storage,                                                                                                                                                  | 
        b_shape: Shape,                                                                                                                                                      | 
        b_strides: Strides,                                                                                                                                                  | 
    ) -> None:                                                                                                                                                               | 
                                                                                                                                                                             | 
                                                                                                                                                                             | 
                                                                                                                                                                             | 
        if (len(out_strides) == len(a_strides) and len(out_strides) == len(b_strides)                                                                                        | 
            and (out_strides == a_strides).all() and (out_strides == b_strides).all() ---------------------------------------------------------------------------------------| #5, 6
            and (out_shape == a_shape).all() and (out_shape == b_shape).all()):----------------------------------------------------------------------------------------------| #7, 8
                                                                                                                                                                             | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------------------------------------------------------| #9
                out[i] = fn(a_storage[i], b_storage[i])                                                                                                                      | 
                                                                                                                                                                             | 
        else:                                                                                                                                                                | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------------------------------------------------------| #12
                                                                                                                                                                             | 
                # index buffer need to be inside the loop to avoid race condition                                                                                            | 
                a_index = np.empty(MAX_DIMS, dtype=np.int64)                                                                                                                 | 
                b_index = np.empty(MAX_DIMS, dtype=np.int64)                                                                                                                 | 
                out_index = np.empty(MAX_DIMS, dtype=np.int64)                                                                                                               | 
                                                                                                                                                                             | 
                to_index(i, out_shape, out_index)                                                                                                                            | 
                broadcast_index(out_index, out_shape, a_shape, a_index)                                                                                                      | 
                broadcast_index(out_index, out_shape, b_shape, b_index)                                                                                                      | 
                out[index_to_position(out_index, out_strides)] = fn(a_storage[index_to_position(a_index, a_strides)],b_storage[index_to_position(b_index, b_strides)])       | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 8 parallel for-
loop(s) (originating from loops labelled: #5, #6, #7, #8, #9, #12, #11, #10).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--12 is a parallel loop
   +--10 --> rewritten as a serial loop
   +--11 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--12 (parallel)
   +--10 (parallel)
   +--11 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--12 (parallel)
   +--10 (serial)
   +--11 (serial)


 
Parallel region 0 (loop #12) had 0 loop(s) fused and 2 loop(s) serialized as 
part of the larger parallel loop (#12).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (235) is hoisted
 out of the parallel loop labelled #12 (it will be performed before the loop is 
executed and reused inside the loop):
   Allocation:: a_index = np.empty(MAX_DIMS, dtype=np.int64)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (236) is hoisted
 out of the parallel loop labelled #12 (it will be performed before the loop is 
executed and reused inside the loop):
   Allocation:: b_index = np.empty(MAX_DIMS, dtype=np.int64)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (237) is hoisted
 out of the parallel loop labelled #12 (it will be performed before the loop is 
executed and reused inside the loop):
   Allocation:: out_index = np.empty(MAX_DIMS, dtype=np.int64)
    - numpy.empty() is used for the allocation.
None
REDUCE
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce, 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (266)  
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (266) 
-----------------------------------------------------------------------------------------------------|loop #ID
    def _reduce(                                                                                     | 
        out: Storage,                                                                                | 
        out_shape: Shape,                                                                            | 
        out_strides: Strides,                                                                        | 
        a_storage: Storage,                                                                          | 
        a_shape: Shape,                                                                              | 
        a_strides: Strides,                                                                          | 
        reduce_dim: int,                                                                             | 
    ) -> None:                                                                                       | 
                                                                                                     | 
                                                                                                     | 
        for i in prange(len(out)):-------------------------------------------------------------------| #13
            out_index = np.empty(MAX_DIMS, dtype=np.int64)                                           | 
                                                                                                     | 
            # Get which index of the out tensor we should start updating with                        | 
            to_index(i, out_shape, out_index)                                                        | 
                                                                                                     | 
            out_position = index_to_position(out_index, out_strides)                                 | 
            a_position = index_to_position(out_index, a_strides)                                     | 
                                                                                                     | 
            # Move along the reduce dimension on a to keep updating the corresponding out storage    | 
            for _ in range(a_shape[reduce_dim]):                                                     | 
                out[out_position] = fn(out[out_position], a_storage[a_position])                     | 
                                                                                                     | 
                a_position += a_strides[reduce_dim]                                                  | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #13).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (278) is hoisted
 out of the parallel loop labelled #13 (it will be performed before the loop is 
executed and reused inside the loop):
   Allocation:: out_index = np.empty(MAX_DIMS, dtype=np.int64)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY
 
================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply, 
/Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (296)  
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/xinchen/Documents/GitHub/minitorch/minitorch/fast_ops.py (296) 
-----------------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                                         | 
    out: Storage,                                                                                    | 
    out_shape: Shape,                                                                                | 
    out_strides: Strides,                                                                            | 
    a_storage: Storage,                                                                              | 
    a_shape: Shape,                                                                                  | 
    a_strides: Strides,                                                                              | 
    b_storage: Storage,                                                                              | 
    b_shape: Shape,                                                                                  | 
    b_strides: Strides,                                                                              | 
) -> None:                                                                                           | 
    """                                                                                              | 
    NUMBA tensor matrix multiply function.                                                           | 
                                                                                                     | 
    Should work for any tensor shapes that broadcast as long as                                      | 
                                                                                                     | 
    ```                                                                                              | 
    assert a_shape[-1] == b_shape[-2]                                                                | 
    ```                                                                                              | 
                                                                                                     | 
    Optimizations:                                                                                   | 
                                                                                                     | 
    * Outer loop in parallel                                                                         | 
    * No index buffers or function calls                                                             | 
    * Inner loop should have no global writes, 1 multiply.                                           | 
                                                                                                     | 
                                                                                                     | 
    Args:                                                                                            | 
        out (Storage): storage for `out` tensor                                                      | 
        out_shape (Shape): shape for `out` tensor                                                    | 
        out_strides (Strides): strides for `out` tensor                                              | 
        a_storage (Storage): storage for `a` tensor                                                  | 
        a_shape (Shape): shape for `a` tensor                                                        | 
        a_strides (Strides): strides for `a` tensor                                                  | 
        b_storage (Storage): storage for `b` tensor                                                  | 
        b_shape (Shape): shape for `b` tensor                                                        | 
        b_strides (Strides): strides for `b` tensor                                                  | 
                                                                                                     | 
    Returns:                                                                                         | 
        None : Fills in `out`                                                                        | 
    """                                                                                              | 
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                           | 
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                           | 
                                                                                                     | 
    # TODO: Implement for Task 3.2.                                                                  | 
    for batch in prange(out_shape[0]):---------------------------------------------------------------| #16
        for row in prange(out_shape[1]):-------------------------------------------------------------| #15
            for col in prange(out_shape[2]):---------------------------------------------------------| #14
                                                                                                     | 
                # Starting position for the multiplication                                           | 
                a_position = batch * a_batch_stride + row * a_strides[1]                             | 
                b_position = batch * b_batch_stride + col * b_strides[2]                             | 
                                                                                                     | 
                # Accumalte multiplication result                                                    | 
                total = 0                                                                            | 
                                                                                                     | 
                for _ in range(a_shape[2]):                                                          | 
                    total += a_storage[a_position] * b_storage[b_position]                           | 
                    a_position += a_strides[2]                                                       | 
                    b_position += b_strides[1]                                                       | 
                                                                                                     | 
                out[batch * out_strides[0] + row * out_strides[1] + col * out_strides[2]] = total    | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #16, #15).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--16 is a parallel loop
   +--15 --> rewritten as a serial loop
      +--14 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--16 (parallel)
   +--15 (parallel)
      +--14 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--16 (parallel)
   +--15 (serial)
      +--14 (serial)


 
Parallel region 0 (loop #16) had 0 loop(s) fused and 2 loop(s) serialized as 
part of the larger parallel loop (#16).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
